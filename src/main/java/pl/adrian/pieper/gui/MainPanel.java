package pl.adrian.pieper.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JScrollPane;
import pl.adrian.pieper.domain.PlaceHolderModule;
import pl.adrian.pieper.domain.ProcessorModule;
import pl.adrian.pieper.domain.TableModule;
import pl.adrian.pieper.domain.TemplatesManager;
import pl.adrian.pieper.domain.TempleteModel;

/**
 *
 * @author Adi
 */
public class MainPanel extends javax.swing.JPanel implements ProcessorModule.Gui, TempleteModel.ProgressGUI{
    private TempleteModel template;
    private TemplatesManager templatesManager;
    /**
     * Creates new form MainPanel
     */
    public MainPanel() {
        initComponents();
    }

    public void setTemplatesManager(TemplatesManager templatesManager) {
        this.templatesManager = templatesManager;
        try{
            templatesManager.load("templates");
            setTemplate(templatesManager.getTemplates().get(0));
            templatesComboBox.setModel(new DefaultComboBoxModel(templatesManager.getTemplates().toArray()));
            templatesComboBox.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent ae) {
                    setTemplate((TempleteModel.Info) templatesComboBox.getSelectedItem());
                }
            });
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        templatesComboBox = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        outName = new javax.swing.JTextField();
        processButton = new javax.swing.JButton();
        processFileLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        setMaximumSize(new java.awt.Dimension(400, 300));
        setMinimumSize(new java.awt.Dimension(400, 300));
        setLayout(new java.awt.GridBagLayout());

        templatesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(templatesComboBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jTabbedPane1, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridLayout(4, 0, 0, 2));

        outName.setText("-");
        jPanel1.add(outName);

        processButton.setText("OK");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });
        jPanel1.add(processButton);

        processFileLabel.setText("-");
        processFileLabel.setMinimumSize(new java.awt.Dimension(0, 0));
        processFileLabel.setPreferredSize(new java.awt.Dimension(0, 0));
        jPanel1.add(processFileLabel);

        progressBar.setMinimumSize(new java.awt.Dimension(0, 0));
        progressBar.setPreferredSize(new java.awt.Dimension(0, 0));
        jPanel1.add(progressBar);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        template.process(outName.getText(),this);
    }//GEN-LAST:event_processButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField outName;
    private javax.swing.JButton processButton;
    private javax.swing.JLabel processFileLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JComboBox templatesComboBox;
    // End of variables declaration//GEN-END:variables

    private void setTemplate(TempleteModel.Info tempInfo) {
        this.template = tempInfo.create();
        jTabbedPane1.removeAll();
        outName.setText(tempInfo.toString());
        for (ProcessorModule module : template.getModules()) {
            module.attach(this);
        }
    }

    @Override
    public void attach(PlaceHolderModule holderProcessor) {
        OtherDatePanel placeHoldersPanel = new OtherDatePanel();
        jTabbedPane1.addTab("Dane", new JScrollPane(placeHoldersPanel));
        placeHoldersPanel.setData(holderProcessor);
    }

    @Override
    public void attach(TableModule tableModule) {
        TablePanel tablePanel = new TablePanel();
        jTabbedPane1.addTab("Wyniki", tablePanel);
        tablePanel.bind(tableModule);
    }

    
    
    @Override
    public void showProgress(int i, int N, String processingFile) {
        processFileLabel.setText(i + "/" + N + " - " + processingFile);
        progressBar.setMaximum(N);
        progressBar.setValue(i);
    }

    @Override
    public void done() {
        processFileLabel.setText("Gotowe");
        progressBar.setValue(0);
    }
}
